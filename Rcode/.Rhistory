#There is no missing values for titles, nor description
#But there are some empty title and description, so I am deleting empty titles.
result <- result[!(result$title==""),]
#CSV file of empty title entry for Jocelyn.
# empty.title <- result[(result$title==""),]
# write.csv(empty.title, file = "emptytitle.csv", append = FALSE, quote = TRUE, sep = " ",
#             eol = "\n", na = "NA", dec = ".", row.names = TRUE,
#             col.names = TRUE, qmethod = c("escape", "double"),
#             fileEncoding = "")
#Let's delete the exact duplicates from the same name "or" the same description
dif.ttl.or.dif.des<- result %>%
filter(!duplicated(title)|!duplicated(description)) %>%
arrange(lat,long)%>%
select(lat, long, title, description,date:ID)
#same title
same.title <- result %>%
filter(duplicated(title))
#same desc
same.desc <- result %>%
filter(duplicated(description))
#same title and different description
same.ttl.diff.desc <- same.title %>%
filter(!(ID%in%same.desc$ID)) %>%
select(lat, long, title, description,date:ID)
#Let A subset that has different title,
#Let B subset that has different description,
#Let c subset that has different location.
#Let's make subset B-A-C:same location with same title, different description
#and name it as temp.
temp <- temp[!is.na(temp$lat),]
temp <- temp[!is.na(temp$long),]
same.ttl.diff.desc.same.gcs <- temp %>%
filter(duplicated(gcs))
#Subset B is made.
# temp.na <- temp[is.na(temp$lat),]
#A∪(B∩C):
same.desc.diff.ttl <- same.desc %>%
filter(!(ID%in%same.title$ID))%>%
select(lat, long, description,date:ID) %>%
arrange(description)
View(same.desc.diff.ttl)
desc.temp <- gsub(","," ",same.desc.diff.ttl$description)
desc.temp <- gsub("\n"," ",same.desc.diff.ttl$description)
temp.2 <- same.desc.diff.ttl[grep("\\b \\b", desc.temp),]
View(temp.2)
View(same.desc.diff.ttl)
#Arrangnig the dataset by title.
result<- result %>%
arrange(description)
#Adding index cuz the rowname is not functioning very well.
result$ID <- seq.int(nrow(result))
result <- result %>%
mutate(gcs=paste(lat,long))
#There is no missing values for titles, nor description
#But there are some empty title and description, so I am deleting empty titles.
result <- result[!(result$title==""),]
#Let's delete the exact duplicates from the same name "or" the same description
dif.ttl.or.dif.des<- result %>%
filter(!duplicated(title)|!duplicated(description)) %>%
arrange(lat,long)%>%
select(lat, long, title, description,date:ID)
#same title
same.title <- result %>%
filter(duplicated(title))
#same desc
same.desc <- result %>%
filter(duplicated(description))
#same title and different description
same.ttl.diff.desc <- same.title %>%
filter(!(ID%in%same.desc$ID)) %>%
select(lat, long, title, description,date:ID)
temp <- temp[!is.na(temp$lat),]
temp <- temp[!is.na(temp$long),]
#B-(A∪C)
same.ttl.diff.desc.same.gcs <- temp %>%
filter(duplicated(gcs))
#Excluding B-(A∪C)
#same location with same title, different description is excluded.
excl.same.ttl.same.loc.dif.des <- dif.ttl.or.dif.des %>%
filter(!(ID%in%same.ttl.diff.desc.same.gcs$ID)) %>%
arrange(lat,long)%>%
select(lat, long, title, description,date:ID)
same.desc.diff.ttl <- same.desc %>%
filter(!(ID%in%same.title$ID))%>%
select(lat, long, description,date:ID) %>%
arrange(description)
View(same.desc.diff.ttl)
result %>% filter(ID=943)
result %>% filter(ID==943)
result %>% filter(ID==943) %>% select(title)
result %>% filter(ID==943) %>% select(title)==result %>% filter(ID==944) %>% select(title)
result %>% filter(ID==943) %>% select(description)==result %>% filter(ID==944) %>% select(description)
View(temp.2)
same.desc.diff.ttl<- same.desc.diff.ttl[grep("\\b \\b", desc.temp),]
View(same.desc.diff.ttl)
View(same.desc.diff.ttl)
same.desc.diff.ttl<- same.desc.diff.ttl[grep("\\b \\b", desc.temp),] %>%
arrange(lat)
View(same.desc.diff.ttl)
same.desc.diff.ttl <- same.desc %>%
filter(!(ID%in%same.title$ID))%>%
select(lat, long, description,date:ID) %>%
arrange(description)
#So many ,,,, description makes it confused, so will delete them.
desc.temp <- gsub(","," ",same.desc.diff.ttl$description)
desc.temp <- gsub("\n"," ",same.desc.diff.ttl$description)
same.desc.diff.ttl<- same.desc.diff.ttl[grep("\\b \\b", desc.temp),] %>%
arrange(lat)
View(same.desc.diff.ttl)
Load(edit_dist_matrix.RData)
Load("edit_dist_matrix.RData")
load("edit_dist_matrix.RData")
head(edit.matrix)
result<- result %>%
arrange(description)
#Adding index cuz the rowname is not functioning very well.
result$ID <- seq.int(nrow(result))
result <- result %>%
mutate(gcs=paste(lat,long))
#There is no missing values for titles, nor description
#But there are some empty title and description, so I am deleting empty titles.
result <- result[!(result$title==""),]
#CSV file of empty title entry for Jocelyn.
# empty.title <- result[(result$title==""),]
# write.csv(empty.title, file = "emptytitle.csv", append = FALSE, quote = TRUE, sep = " ",
#             eol = "\n", na = "NA", dec = ".", row.names = TRUE,
#             col.names = TRUE, qmethod = c("escape", "double"),
#             fileEncoding = "")
#Let's delete the exact duplicates from the same name "or" the same description
dif.ttl.or.dif.des<- result %>%
filter(!duplicated(title)|!duplicated(description)) %>%
arrange(lat,long)%>%
select(lat, long, title, description,date:ID)
#same title
same.title <- result %>%
filter(duplicated(title))
#same desc
same.desc <- result %>%
filter(duplicated(description))
#same title and different description
same.ttl.diff.desc <- same.title %>%
filter(!(ID%in%same.desc$ID)) %>%
select(lat, long, title, description,date:ID)
#Let A subset that has different title,
#Let B subset that has different description,
#Let c subset that has different location.
#Let's make subset B-A-C:same location with same title, different description
#and name it as temp.
temp <- temp[!is.na(temp$lat),]
temp <- temp[!is.na(temp$long),]
#B-(A∪C)
same.ttl.diff.desc.same.gcs <- temp %>%
filter(duplicated(gcs))
#Excluding B-(A∪C)
#same location with same title, different description is excluded.
excl.same.ttl.same.loc.dif.des <- dif.ttl.or.dif.des %>%
filter(!(ID%in%same.ttl.diff.desc.same.gcs$ID)) %>%
arrange(lat,long)%>%
select(lat, long, title, description,date:ID)
same.desc.diff.ttl <- same.desc %>%
filter(!(ID%in%same.title$ID))%>%
select(lat, long, description,date:ID) %>%
arrange(description)
#So many ,,,, description makes it confused, so will delete them.
desc.temp <- gsub(","," ",same.desc.diff.ttl$description)
desc.temp <- gsub("\n"," ",same.desc.diff.ttl$description)
same.desc.diff.ttl<- same.desc.diff.ttl[grep("\\b \\b", desc.temp),] %>%
arrange(lat)
2619^2
sqrt(6853924)
s
substr(s, 1, nchar(s)-5)
datapath<-paste(substr(s, 1, nchar(s)-5),"rental_crawlers/raw_listing.csv",sep = "")
#If you cannot load the raw dataset, you need to set it by yourself by matching the csv file name.
result <- read.csv(file=datapath,header=T,stringsAsFactors = FALSE)
#Arrangnig the dataset by title.
result<- result %>%
arrange(description)
#Adding index cuz the rowname is not functioning very well.
result$ID <- seq.int(nrow(result))
result <- result %>%
mutate(gcs=paste(lat,long))
#There is no missing values for titles, nor description
#But there are some empty title and description, so I am deleting empty titles.
result <- result[!(result$title==""),]
#Let's delete the exact duplicates from the same name "or" the same description
dif.ttl.or.dif.des<- result %>%
filter(!duplicated(title)|!duplicated(description)) %>%
arrange(lat,long)%>%
select(lat, long, title, description,date:ID)
View(dif.ttl.or.dif.des)
edit.matrix[656,657]
vec.dist <- as.vector(edit.matrix)
hist(vec.dist)
hist(vec.dist)
hist(vec.dist)
dup.candidates <- c()
for (i in 1:(nrow(edit.matrix)-1)) {
for (j in (i+1):nrow(edit.matrix)) {
if (edit.matrix[i,j]<200) {
dup.candidates <- c(dup.candidates,j)
}
}
}
str(c)
str(dup.candidates)
dup.candidates <- dup.candidates[!duplicated(dup.candidates)]
dup.candidates
dup.candidates
View(dif.ttl.or.dif.des)
View(result)
dup.candidates
View(result)
edit.matrix[205,206:216]
View(dif.ttl.or.dif.des)
##housing type -> rooms sqft
a <- dif.ttl.or.dif.des
a$housing_type <- gsub("/","",dif.ttl.or.dif.des$housing_type)
View(a)
grep("\\bprivate room\\b", a$housing_type)
private_index <- grep("\\bprivate room\\b", a$housing_type)
substr(a$housing_type,1,3)
substr(a$housing_type,1,4)
a <- a %>%
filter(row.names()%in%private_index) %>%
mutate(rooms=substr(a$housing_type,1,4))
a <- a %>%
filter(!row.names(a)%in%private_index) %>%
mutate(rooms=substr(a$housing_type,1,4))
a$rooms <- NA
View(a)
a <- a %>%
filter(!row.names(a)%in%private_index) %>%
mutate(rooms=substr(a$housing_type,1,4))
SRS(c(5,8,3),2)
?SRS
??SRS
library(PSWR)
install.packages("PSWR")
install.packages("PASWR")
library(PASWR)
library(PASWR)
library("PASWR")
library(PASWR)
library("PASWR")
library(PASWR)
SRS(c(5,8,3),2)
sample(c(0,1), 100, replace = TRUE)
sample(c(0,1), 100, replace = FALSE)
sample(1:100, 10, replace = FALSE)
sample(1:100, 10, replace = FALSE)
set.seed(1)
sample(1:100, 10, replace = FALSE)
set.seed(1)
sample(1:100, 10, replace = FALSE)
sample(1:nrow(dif.ttl.or.dif.des), 100, replace = FALSE)
sampled.index <- sample(1:nrow(dif.ttl.or.dif.des), 100, replace = FALSE)
sampled.index
set.seed(1)
sampled.index <- sample(1:nrow(dif.ttl.or.dif.des), 100, replace = FALSE)
sampled.index
set.seed(1)
sampled.index <- sample(1:nrow(dif.ttl.or.dif.des), 100, replace = FALSE)
sampled.index
View(dif.ttl.or.dif.des)
rownames(dif.ttl.or.dif.des)
str(rownames(dif.ttl.or.dif.des))
sampled.data <- dif.ttl.or.dif.des %>%
filter(as.numeric(rownames(dif.ttl.or.dif.des))%in%sampled.index)
View(sampled.data)
rownames(sampled.data)
as.numeric(rownames(dif.ttl.or.dif.des))
sort(sampled.index)
sampled.data <- dif.ttl.or.dif.des %>%
filter(as.numeric(rownames(dif.ttl.or.dif.des))%in%sampled.index) %>%
arrange(title())
arrange(title
)
sampled.data <- dif.ttl.or.dif.des %>%
filter(as.numeric(rownames(dif.ttl.or.dif.des))%in%sampled.index) %>%
arrange(title)
combn(letters[1:4], 2)
(m <- combn(10, 5, min))   # minimum value in each combination
mm <- combn(15, 6, function(x) matrix(x, 2, 3))
stopifnot(round(choose(10, 5)) == length(m),
c(2,3, round(choose(15, 6))) == dim(mm))
mm
combn(letters[1:4], 2)
choose(10, 5)
round(choose(10, 5))
combn(100,2)
combn(1:100,2)
a <- combn(1:100,2)
View(a)
str(a)
as.matrix(a)
a <- as.matrix(a)
str(a)
a[1,1]
a[1,2]
a[1,3]
a[2,3]
a <- combn(1:100,2)
a[2,3]
a[1,3]
a[1,]
a[,1]
a[,2]
i=8
a[,i]
str(a[,i])
nrow(sampled.index)
nrow(sampled.data)
i=1
sampled.data$ID[i,]
sampled.data$ID[i]
j=2
sampled.data$ID[j]
first.id
first.id <- sampled.data$ID[i]
second.id <- sampled.data$ID[j]
first.id
second.id
dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% select(row.names)
#ID first, removing "" next result goes to the dataset, and we got the matrix.
add_rownames(dif.ttl.or.dif.des, var = "rowname")
#ID first, removing "" next result goes to the dataset, and we got the matrix.
rownames_to_column(dif.ttl.or.dif.des,var="rowname")
View(dif.ttl.or.dif.des)
#ID first, removing "" next result goes to the dataset, and we got the matrix.
dif.ttl.or.dif.des <- rownames_to_column(dif.ttl.or.dif.des,var="rowname")
View(dif.ttl.or.dif.des)
dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% select(rowname)
second.id
dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% select(rowname)
dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% select(ID)
dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id))
dif.ttl.or.dif.des %>%
select(rowname)
library("tidyverse")
dif.ttl.or.dif.des %>%
select(rowname)
dif.ttl.or.dif.des %>%
select(title)
dif.ttl.or.dif.des
dif.ttl.or.dif.des %>%
select(title, description)
excl.same.ttl.same.loc.dif.des <- dif.ttl.or.dif.des %>%
filter(!(ID%in%same.ttl.diff.desc.same.gcs$ID)) %>%
arrange(lat,long)%>%
select(lat, long, title, description,date:ID)
library("tidyverse")
library(tidyverse)
same.ttl.diff.desc <- same.title %>%
filter(!(ID%in%same.desc$ID)) %>%
select(lat, long, title, description,date:ID)
library(dplyr)
same.ttl.diff.desc <- same.title %>%
filter(!(ID%in%same.desc$ID)) %>%
select(lat, long, title, description,date:ID)
library (MASS)
library(dplyr)
library("stringdist")
sampled.data <- dif.ttl.or.dif.des %>%
filter(as.numeric(rownames(dif.ttl.or.dif.des))%in%sampled.index) %>%
arrange(title)
dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% select(rowname)
dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% dplyr::select(rowname)
matrix.index <- dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% dplyr::select(rowname)
matrix.index
as.vector(matrix.index)
str(matrix.index)
str(as.vector(matrix.index))
matrix.index[1]
matrix.index[1,1]
matrix.index[1,2]
matrix.index[2,1]
matrix.index <- as.numeric(matrix.index)
str(matrix.index)
matrix.index <- as.numeric(matrix.index$rowname)
matrix.index
matrix.index[2]
edit.matrix[matrix.index[1],matrix.index[2]]
sample.edit.matrix <- matrix(data=NA, nrow=100, ncol=100)
View(sample.edit.matrix)
edit.value
edit.value <- edit.matrix[matrix.index[1],matrix.index[2]]
edit.value
rownames(sample.edit.matrix) <- sampled.data$ID
colnames(sample.edit.matrix) <- sampled.data$ID
for (i in 1:(nrow(sampled.data)-1)) {
for (j in (i+1):nrow(sampled.data)) {
first.id <- sampled.data$ID[i]
second.id <- sampled.data$ID[j]
matrix.index <- dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% dplyr::select(rowname) %>% arrange(rowname)
matrix.index <- as.numeric(matrix.index$rowname)
edit.value <- edit.matrix[matrix.index[1],matrix.index[2]]
sample.edit.matrix[i,j] <- edit.value
}
}
View(sample.edit.matrix)
View(sampled.data)
View(sampled.data)
sampled.data <- dif.ttl.or.dif.des %>%
filter(as.numeric(rownames(dif.ttl.or.dif.des))%in%sampled.index) %>%
arrange(title)
View(sample.edit.matrix)
View(sampled.data)
#########
set.seed(1)
sampled.index <- sample(1:nrow(same.ttl.diff.desc), 100, replace = FALSE)
sampled.data <- same.ttl.diff.desc %>%
filter(as.numeric(rownames(same.ttl.diff.desc))%in%sampled.index) %>%
arrange(title)
dif.ttl.or.dif.des <- rownames_to_column(dif.ttl.or.dif.des,var="rowname")
sample.edit.matrix <- matrix(data=NA, nrow=100, ncol=100)
rownames(sample.edit.matrix) <- sampled.data$ID
colnames(sample.edit.matrix) <- sampled.data$ID
for (i in 1:(nrow(sampled.data)-1)) {
for (j in (i+1):nrow(sampled.data)) {
first.id <- sampled.data$ID[i]
second.id <- sampled.data$ID[j]
matrix.index <- dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% dplyr::select(rowname) %>% arrange(rowname)
matrix.index <- as.numeric(matrix.index$rowname)
edit.value <- edit.matrix[matrix.index[1],matrix.index[2]]
sample.edit.matrix[i,j] <- edit.value
}
}
View(sample.edit.matrix)
View(same.ttl.diff.desc)
View(sampled.data)
#########
set.seed(1)
sampled.index <- sample(1:nrow(same.ttl.diff.desc), 100, replace = FALSE)
sampled.data <- same.ttl.diff.desc %>%
filter(as.numeric(rownames(same.ttl.diff.desc))%in%sampled.index) %>%
arrange(title)
#ID first, removing "" next result goes to the dataset, and we got the matrix.
dif.ttl.or.dif.des <- rownames_to_column(dif.ttl.or.dif.des,var="rowname")
sample.edit.matrix <- matrix(data=NA, nrow=100, ncol=100)
rownames(sample.edit.matrix) <- sampled.data$ID
colnames(sample.edit.matrix) <- sampled.data$ID
for (i in 1:(nrow(sampled.data)-1)) {
for (j in (i+1):nrow(sampled.data)) {
first.id <- sampled.data$ID[i]
second.id <- sampled.data$ID[j]
matrix.index <- dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% dplyr::select(rowname) %>% arrange(rowname)
matrix.index <- as.numeric(matrix.index$rowname)
edit.value <- edit.matrix[matrix.index[1],matrix.index[2]]
sample.edit.matrix[i,j] <- edit.value
}
}
View(sampled.data)
View(sample.edit.matrix)
t
a <- as.vector(deit.matrix)
a <- as.vector(edit.matrix)
hist(a)
hist(a)
sample.edit.vector <- as.vector(sample.edit.matrix)
hist(sample.edit.vector)
sample.edit.vector.dup <- as.vector(sample.edit.matrix)
hist(sample.edit.vector.dup)
dif.ttl.or.dif.des <- rownames_to_column(dif.ttl.or.dif.des,var="rowname")
sample.edit.matrix <- matrix(data=NA, nrow=100, ncol=100)
rownames(sample.edit.matrix) <- sampled.data$ID
colnames(sample.edit.matrix) <- sampled.data$ID
for (i in 1:(nrow(sampled.data)-1)) {
for (j in (i+1):nrow(sampled.data)) {
first.id <- sampled.data$ID[i]
second.id <- sampled.data$ID[j]
matrix.index <- dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% dplyr::select(rowname) %>% arrange(rowname)
matrix.index <- as.numeric(matrix.index$rowname)
edit.value <- edit.matrix[matrix.index[1],matrix.index[2]]
sample.edit.matrix[i,j] <- edit.value
}
}
set.seed(1)
sampled.index <- sample(1:nrow(dif.ttl.or.dif.des), 100, replace = FALSE)
sampled.data <- dif.ttl.or.dif.des %>%
filter(as.numeric(rownames(dif.ttl.or.dif.des))%in%sampled.index) %>%
arrange(title)
#ID first, removing "" next result goes to the dataset, and we got the matrix.
dif.ttl.or.dif.des <- rownames_to_column(dif.ttl.or.dif.des,var="rowname")
sample.edit.matrix <- matrix(data=NA, nrow=100, ncol=100)
rownames(sample.edit.matrix) <- sampled.data$ID
colnames(sample.edit.matrix) <- sampled.data$ID
for (i in 1:(nrow(sampled.data)-1)) {
for (j in (i+1):nrow(sampled.data)) {
first.id <- sampled.data$ID[i]
second.id <- sampled.data$ID[j]
matrix.index <- dif.ttl.or.dif.des %>% filter(ID%in%c(first.id,second.id)) %>% dplyr::select(rowname) %>% arrange(rowname)
matrix.index <- as.numeric(matrix.index$rowname)
edit.value <- edit.matrix[matrix.index[1],matrix.index[2]]
sample.edit.matrix[i,j] <- edit.value
}
}
sample.edit.vector <- as.vector(sample.edit.matrix)
hist(sample.edit.vector)
his.nondup <- hist(sample.edit.vector)
his.du <- hist(sample.edit.vector.dup)
his.nondup
his.nondup
View(his.nondup)
hist(sample.edit.vector)
hist(sample.edit.vector)
hist(sample.edit.vector.dup)
hist(sample.edit.vector)
hist(sample.edit.vector)
hist(sample.edit.vector.dup)
hist(sample.edit.vector)
hist(sample.edit.vector.dup)
